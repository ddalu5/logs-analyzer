{
  "name": "Logs-analyzer",
  "tagline": "Logs-analyzer is a Python based library containing functions that can help you extract usable data from logs.",
  "body": "# Logs-analyzer\r\n\r\nLogs-analyzer is a Python based library containing functions that can help you extract usable data from logs.\r\n\r\n## Status\r\n![Status](https://codeship.com/projects/b12161a0-f65e-0133-0e7a-7e18ff1a37b8/status?branch=master)\r\n\r\n## Quickstart\r\n\r\n### Support\r\n**Python 2:** 2.7+\r\n\r\n**Logs:** Apache2, Nginx, Auth\r\n\r\n### Install\r\nusing pip : `pip install logs-analyzer`\r\n\r\n### Code sample\r\n```python\r\nfrom logs_analyzer.lib import LogsAnalyzer\r\n\r\nnginx_logsanalyzer = LogsAnalyzer('nginx')\r\nnginx_logsanalyzer.add_date_filter(minute='*', hour=22, day=4, month=5)\r\nnginx_logsanalyzer.add_filter('192.10.1.1')\r\nrequests = nginx_logsanalyzer.get_requests()\r\n\r\n```\r\n\r\n## Non-object functions\r\n\r\n### Function get_service_settings\r\nGet default settings for the said service from the settings file, three type\r\nof logs are supported right now: `nginx`, `apache2` and `auth`.\r\n#### Parameters\r\n**service_name:** service name  (e.g. nginx, apache2...).\r\n#### Return\r\nReturns a dictionary containing the chosen service settings or `None` if the\r\nservice doesn't exists.\r\n#### Sample\r\n`nginx_settings = get_service_settings('nginx')`\r\n\r\n### Function get_date_filter\r\nGet the date pattern that can be used to filter data from\r\nlogs based on the parameters.\r\n#### Parameters\r\n**settings:** the target logs settings.\r\n\r\n**minute:** default now, minutes or * to ignore.\r\n\r\n**hour:** default now, hours or * to ignore.\r\n\r\n**day:** default now, day of month.\r\n\r\n**month:** default now, month number.\r\n\r\n**year:** default now, year.\r\n#### Return\r\nReturns date pattern (String).\r\n#### Sample\r\n```python\r\nnginx_settings = get_service_settings('nginx')\r\ndate_pattern = get_date_filter(nginx_settings, 13, 13, 16, 1, 1989)\r\nprint(date_pattern)\r\n```\r\nPrints `[16/Jan/1989:13:13`\r\n\r\n### Function filter_data\r\nFilter received data/file content and return the results.\r\n#### Parameters\r\n**log_filter:** string that will be used to filter data\r\n\r\n**data:** data to be filtered (String) or None if the data will\r\nbe loaded from a file.\r\n\r\n**filepath:** filepath from where data will be loaded or None if\r\nthe data has been passed as a parameter.\r\n\r\n**is_casesensitive:** if the filter has to be case sensitive\r\n(default True).\r\n\r\n**is_regex:** if the filter string is a regular expression\r\n(default False).\r\n\r\n**is_reverse:** (boolean) invert selection.\r\n#### Return\r\nReturns filtered data (String).\r\n#### Sample\r\n```python\r\nnginx_settings = get_service_settings('nginx')\r\ndate_filter = get_date_filter(nginx_settings, '*', '*', 27, 4, 2016)\r\nbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nfile_name = os.path.join(base_dir, 'logs-samples/nginx1.sample')\r\ndata = filter_data('192.168.5', filepath=file_name)\r\ndata = filter_data(date_filter, data=data)\r\n```\r\n\r\n### Function get_web_requests\r\nAnalyze the web logs (Nginx & Apache2 for now) data and return list of requests\r\nformatted as the model (pattern) defined.\r\n#### Parameters\r\n**data:** (String) data to analyzed.\r\n\r\n**pattern:** (Regular expression) used to extract requests.\r\n\r\n**date_pattern:** (Regular expression or None) used to extract date elements\r\nto have ISO formatted dates.\r\n\r\n**date_keys:** (List or None) list of extracted date elements placements.\r\n#### Return\r\nReturns a List of requests as dictionaries.\r\n#### Sample\r\n```python\r\napache2_settings = get_service_settings('apache2')\r\nbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nfile_name = os.path.join(base_dir, 'logs-samples/apache1.sample')\r\ndata = filter_data('127.0.1.1', filepath=file_name)\r\nrequests = get_web_requests(data, apache2_settings['request_model'],\r\n                            nginx_settings['date_pattern'], nginx_settings['date_keys'])\r\n```\r\n\r\n### Function get_auth_requests\r\nAnalyze the Auth logs data and return list of requests\r\nformatted as the model (pattern) defined.\r\n#### Parameters\r\n**data:** (String) data to analyzed.\r\n\r\n**pattern:** (Regular expression) used to extract requests.\r\n\r\n**date_pattern:** (Regular expression or None) used to extract date elements\r\nto have ISO formatted dates.\r\n\r\n**date_keys:** (List or None) list of extracted date elements placements.\r\n#### Return\r\nReturns a List of requests as dictionaries.\r\n#### Sample\r\n```python\r\nauth_settings = get_service_settings('auth')\r\nbase_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\ndate_filter = get_date_filter(auth_settings, '*', 22, 4, 5)\r\nfile_name = os.path.join(base_dir, 'logs-samples/auth.sample')\r\ndata = filter_data('120.25.229.167', filepath=file_name)\r\ndata = filter_data(date_filter, data=data)\r\nrequests = get_auth_requests(data, auth_settings['request_model'],\r\n                                     auth_settings['date_pattern'], auth_settings['date_keys'])\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}